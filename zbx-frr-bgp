#!/usr/bin/env python3
import re
import subprocess
import sys
import json
import argparse
import os
import time

VAL_MAP = {
    "Idle (Admin)": {"state": -1},
    "Idle (PfxCt)": {"state": -2},
    "Idle": {"state": -3},
    "Connect": {"state": -4},
    "Active": {"state": -5},
    "OpenSent": {"state": -6},
    "OpenConfirm": {"state": -7},
    "Established": {"state": 0}
}

parser = argparse.ArgumentParser()
parser.add_argument("action", help="discovery")
parser.add_argument("-n", help="neighbor")
args = parser.parse_args()


def run_config():
    neighbor_settings = {}
    try:
        process = subprocess.Popen(
            ["vtysh", "-c", "show ip bgp summary json"], stdout=subprocess.PIPE)
    except IOError:
        print("1ZBX_NOTSUPPORTED")
        sys.exit(1)
    out, err = process.communicate()

    return json.loads(out.decode())

if __name__ == '__main__':
    result = None
    json_cache = run_config()
    neighbors = json_cache['ipv4Unicast']['peers']

    if args.action == 'neighbor_state' and args.n:

        for n in neighbors:
            if neighbors[args.n]['state']:
                value = neighbors[args.n]['state']
                result = VAL_MAP.get(value, value)
                break

    if args.action == 'discovery':

        result = {"data": []}
        for n in neighbors:
            description = neighbors[n]
            value = {
                "{#PEER_IP}": n,
                "{#DESCRIPTION}": neighbors[n]['hostname']}
            result["data"].append(value)
    if not result:
        print("3ZBX_NOTSUPPORTED")
        sys.exit(1)
    print(json.dumps(result, indent=4, sort_keys=True))