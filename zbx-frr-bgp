#!/usr/bin/env python3
import re
import subprocess
import sys
import json
import argparse
import os
import time


VAL_MAP = {
    "Established": 0,
    "Idle (Admin)": -1,
    "Idle (PfxCt)": -2,
    "Idle": -3,
    "Connect": -4,
    "Active": -5,
    "OpenSent": -6,
    "OpenConfirm": -7
}

JSONFILE = '/tmp/bgpmon.json'
CACHELIFE = 60

parser = argparse.ArgumentParser()
parser.add_argument("action", help="discovery")
parser.add_argument("-n", help="neighbor")
args = parser.parse_args()


def run_config():
    json_cache = {}
    if os.path.exists(JSONFILE):
        time_cur_json = os.path.getmtime(JSONFILE)
        if time.time() - time_cur_json <= CACHELIFE:
            with open(JSONFILE) as f:
                json_cache = json.load(f)
    if not json_cache:
        try:
            process = subprocess.Popen(
                ["vtysh", "-c", "show ip bgp summary json"], stdout=subprocess.PIPE)
        except IOError:
            print("1ZBX_NOTSUPPORTED")
            sys.exit(1)
        out, err = process.communicate()
        json_cache = json.loads(out.decode())
        f = open(JSONFILE, 'w')
        f.write(out.decode())
        f.close()

    return json_cache

if __name__ == '__main__':
    result = None
    json_cache = run_config()
    neighbors = json_cache['ipv4Unicast']['peers']

    if args.action == 'neighbor_state' and args.n:

        for n in neighbors:
            if neighbors[args.n]['state']:
                result = {
                        "state": VAL_MAP.get(neighbors[args.n]['state']),
                        "pfxRcd": neighbors[args.n].get('pfxRcd',0),
                        "pfxSnt": neighbors[args.n].get('pfxSnt',0),
                        "peerUptimeEstablishedEpoch": neighbors[args.n].get('peerUptimeEstablishedEpoch',-1)
                        }
                break

    if args.action == 'discovery':

        result = {"data": []}
        for n in neighbors:
            description = neighbors[n]
            value = {
                "{#PEER_IP}": n,
                "{#PFX_RCD}": neighbors[n].get('pfxRcd',0),
                "{#PFX_SNT}": neighbors[n].get('pfxSnt',0),
                "{#UPTIME}": neighbors[n].get('peerUptimeEstablishedEpoch',-1),
                "{#DESCRIPTION}": neighbors[n].get('hostname','')}
            result["data"].append(value)
    if not result:
        print("3ZBX_NOTSUPPORTED")
        sys.exit(1)
    print(json.dumps(result, indent=4, sort_keys=True))